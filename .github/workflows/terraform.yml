name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  build-and-deploy:
    name: 'Build and Deploy'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
      with:
        persist-credentials: false

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.100

    - name: Build with dotnet  
      working-directory: ./src
      run: dotnet publish --configuration Release --runtime linux-x64 --self-contained
      env:
        DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: 1

    - name: Prep Deployment Package
      uses:  papeloto/action-zip@v1
      with:
        files: ${{ github.workspace }}/src/bin/Release/netcoreapp3.1/linux-x64/publish/
        dest: ${{ github.workspace }}/terraform/dist/function.zip

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ${{ github.workspace }}/terraform
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: ${{ github.workspace }}/terraform
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ${{ github.workspace }}/terraform
      run: terraform plan

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      working-directory: ${{ github.workspace }}/terraform
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
